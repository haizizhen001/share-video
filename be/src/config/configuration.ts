export default () => ({
  port: parseInt(process.env.PORT, 10) || 3000,
  configDBMiddleware: {
    connect: process.env.DB_CONNECTION,
    host: process.env.DB_HOST,
    port: process.env.DB_PORT,
    database: process.env.DB_DATABASE,
    user: process.env.DB_USER_DATABASE,
    password: process.env.DB_PASSWORD,
    db_auth: process.env.DB_USER_DATABASE_AUTH,
    db_replica: process.env.DB_REPLICA_SET,
  },
  configDBSale: {
    connect: process.env.DB_CONNECTION_SALE,
    host: process.env.DB_HOST_SALE,
    port: process.env.DB_PORT_SALE,
    database: process.env.DB_DATABASE_SALE,
    user: process.env.DB_USER_DATABASE_SALE,
    password: process.env.DB_PASSWORD_SALE,
    db_auth: process.env.DB_USER_DATABASE_AUTH_SALE,
    db_replica: process.env.DB_REPLICA_SET_SALE,
  },
  configOrderDB: {
    connect: process.env.ORDER_DB_CONNECTION,
    host: process.env.ORDER_DB_HOST,
    port: process.env.ORDER_DB_PORT,
    database: process.env.ORDER_DB_DATABASE,
    user: process.env.ORDER_DB_USER_DATABASE,
    password: process.env.ORDER_DB_PASSWORD,
    db_auth: process.env.ORDER_DB_USER_DATABASE_AUTH,
    db_replica: process.env.ORDER_DB_REPLICA,
    is_direct_connection: process.env.ORDER_DB_DIRECT_CONNECTION,
  },
  config: {
    useUnifiedTopology: true,
    // directConnection: true,
    retryReads: true,
  },
  elasticSearch: {
    host: process.env.ELASTIC_HOST,
    port: process.env.ELASTIC_PORT,
    username: process.env.ELASTIC_USERNAME,
    password: process.env.ELASTIC_PASSWORD,
    elasticIndex: process.env.ELASTIC_INDEX,
  },
  rabbitMQ: {
    rb_host: process.env.RABBITMQ_HOST,
    rb_port: process.env.RABBITMQ_PORT,
    rb_username: process.env.RABBITMQ_USERNAME,
    rb_password: process.env.RABBITMQ_PASSWORD,
    rb_vhost: process.env.RABBITMQ_VHOST,
    rb_connect_time_out: process.env.RABBITMQ_RECONNECT_TIMEOUT,
    rb_prefetch: process.env.RABBITMQ_PREFETCH,
    rb_queue_name: process.env.RABBIT_QUEUE_NAME,
    exchanges: [
      {
        name: 'sync.database.elastic',
        type: 'topic',
      },
      {
        name: 'queue.handle.message.error',
        type: 'topic',
      },
    ],
    prefetchCount: process.env.PREFETCH_COUNT || 10,
    reconnectTimeInSeconds: process.env.RECONNECT_TIME_SECONDS || 10,
  },
  redis: {
    host: process.env.REDIS_HOST,
    port: process.env.REDIS_PORT,
    username: process.env.REDIS_USERNAME,
    password: process.env.REDIS_PASSWORD,
    db: process.env.REDIS_DB,
  },
  kafka: {
    client: {
      clientId: process.env.KAFKA_CLIENT_ID,
      brokers: [process.env.KAFKA_BROKER],
      sasl: {
        mechanism: process.env.KAFKA_MECHANISM || 'scram-sha-512',
        username: process.env.KAFKA_USERNAME,
        password: process.env.KAFKA_PASSWORD,
      },
      ssl: process.env.KAFKA_SSL || true,
    },
    producer: {
      allowAutoTopicCreation: true,
    },
    consumer: {
      groupId: process.env.KAFKA_GROUP_ID || 'nestjs-group-client',
      allowAutoTopicCreation: true,
      sessionTimeout: 30000,
    },
  },
});
